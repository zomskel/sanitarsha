import logging
import random

from aiogram import Bot, Dispatcher, executor, types

#—Ç—É—Ç —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–∫–µ–Ω!
TOKEN = 'null' 

#–ª–æ–≥–≥–∏–Ω–≥
logging.basicConfig(level=logging.INFO)

#–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

#—Å—Ç–∞—Ä—Ç –∏ —Ö–µ–ª–ø
@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç {}!".format(message.from_user.first_name))
    await message.answer_sticker(r'CAACAgIAAxkBAAECuaBhE6f5SBpuIdJbBbrhslSZBw26VAACsQ0AAjppOUjINKv7N0gdWiAE')
    await message.reply("–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n/random - –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100\n/shiza - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —à–∏–∑–æ–∏–¥–∞\n/droch - –í–∑–¥—Ä–æ—á–Ω—É—Ç—å")
    print("–ö–æ–º–∞–Ω–¥–∞ /start –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.")

#—Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä
@dp.message_handler(commands=['random'])
async def send_random(message: types.Message):
    await message.reply("–¢–≤–æ—ë —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ: {} " .format(random.randint(1, 100)))
    print("–ö–æ–º–∞–Ω–¥–∞ /random –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.")

 # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —à–∏–∑–æ–∏–¥–∞
@dp.message_handler(commands=['shiza'])
async def send_random(message: types.Message):
    await message.reply("<b>ü¶† {}, —Ç—ã —à–∏–∑–æ–∏–¥ –Ω–∞ {}%!</b>" .format(message.from_user.first_name, random.randint(0, 100)), parse_mode=types.ParseMode.HTML)
    print("–ö–æ–º–∞–Ω–¥–∞ /shiza –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.")

# –¥—Ä–æ—á
@dp.message_handler(commands=['droch'])
async def droch_reply(message: types.Message):
    await message.reply("<b>{}, —Ç—ã —É—Å–ø–µ—à–Ω–æ –≤–∑–¥—Ä–æ—á–Ω—É–ª! üí¶</b>" .format(message.from_user.first_name), parse_mode=types.ParseMode.HTML)
    print("–ö–æ–º–∞–Ω–¥–∞ /droch –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.")

#—Ö–∞–Ω–¥–ª–µ—Ä –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
@dp.message_handler(content_types=["new_chat_members"])
async def on_user_join(message: types.Message):
    await message.reply("<b>–ü—Ä–∏–≤–µ—Ç {} üëã! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç, —è —Å–∞–Ω–∏—Ç–∞—Ä—à–∞.</b>" .format(message.new_chat_members[0].first_name), parse_mode=types.ParseMode.HTML)
    print("–•–∞–Ω–¥–ª–µ—Ä –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")

#—Ö–∞–Ω–¥–ª–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª
@dp.message_handler(content_types=["left_chat_member"])
async def on_user_join(message: types.Message):
    await message.reply("<b>–ü—Ä–æ—â–∞–π {}! –§—É –∫–∏–¥–æ–∫, –Ω–µ–Ω–∞–≤–∏–∂—É üò°.</b>" .format(message.from_user.first_name), parse_mode=types.ParseMode.HTML)
    print("–•–∞–Ω–¥–ª–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")

#—ç—Ö–æ
@dp.message_handler()
async def send_echo(message: types.Message):
    await message.answer(message.text)

#long polling
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
    executor.start_polling(dp, skip_updates=True)